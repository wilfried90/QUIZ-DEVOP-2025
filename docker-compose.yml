version: "3.8"

networks:
  backend:
    driver: bridge  # Isolation du trafic inter-services

volumes:
  pgdata:
  prometheus_data:
  grafana_data:

services:
  nginx:
    build:
      context: ./proxy
      dockerfile: Dockerfile
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    networks:
      - backend
    depends_on:
      - frontend
      - server

  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - "15672:15672"
      - "5672:5672"
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    networks:
      - backend
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 5s
      retries: 5

  grafana:
    image: grafana/grafana:latest
    restart: always
    ports:
      - "3001:3000"
    environment:
      GF_SECURITY_ADMIN_USER: ${GF_SECURITY_ADMIN_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GF_SECURITY_ADMIN_PASSWORD:-admin}
    volumes:
      - ./monitoring/grafana_conf/grafana.ini:/etc/grafana/grafana.ini:ro
      - grafana_data:/var/lib/grafana
    networks:
      - backend
    depends_on:
      prometheus:
        condition: service_healthy

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/custom-prometheus.yml:ro
    command:
      - "--config.file=/etc/prometheus/custom-prometheus.yml"
    ports:
      - "9090:9090"
    networks:
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "wget --spider --quiet http://localhost:9090/-/ready || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5

  db:
    image: postgres:latest
    environment:
      POSTGRES_DB: quiz_database
      POSTGRES_USER: quiz_user
      POSTGRES_PASSWORD: quiz_password
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U quiz_user -d quiz_database"]
      interval: 10s
      timeout: 5s
      retries: 5

  server:
    build:
      context: ./server
      dockerfile: Dockerfile
    command: npm run dev
    networks:
      - backend
    expose:
      - "5000"
    depends_on:
      db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy

  celery:
    build:
      context: ./server
      dockerfile: Dockerfile
    command: celery -A server_config worker --loglevel=info
    environment:
      DATABASE_URL: postgresql://quiz_user:quiz_password@db:5432/quiz_database
      RABBITMQ_URL: amqp://guest:guest@rabbitmq:5672/
    networks:
      - backend
    depends_on:
      - server
      - rabbitmq

  frontend:
    build:
      context: ./client
      dockerfile: Dockerfile
    expose:
      - "3000"
    networks:
      - backend
    depends_on:
      - server
